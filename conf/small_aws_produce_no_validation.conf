#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

{
  # Sets up a 4 node AWS cluster and runs ProduceBench on it.

  "conf": {
    "kafkaPath": "%{CASTLE_KAFKA_PATH}",
    "schemaRegistryPath": "%{CASTLE_SCHEMA_REGISTRY_PATH}",
    "castlePath": "%{CASTLE_PATH}",
    "globalTimeout": 3600
  },
  "nodes": {
    "node[0-2]": {
      "roleNames": [
        "awsNode",
        "broker",
        "collectd",
        "jmx",
        "trogdorAgent",
        "ubuntuNode"
      ]
    },
    "node3": {
      "roleNames": [
        "awsNode",
        "collectd",
        "task",
        "trogdorCoordinator",
        "ubuntuNode",
        "zooKeeper"
      ]
    },
    "node4": {
      "roleNames": [
        "awsNode",
        "collectd",
        "jmx",
        "ubuntuNode",
        "schemaRegistry"
      ]
    }
  },
  "roles": {
    "awsNode": {
      "type": ".AwsNodeRole",
      "keyPair": "%{CASTLE_AWS_KEY}",
      "securityGroup": "%{CASTLE_AWS_SECURITY_GROUP}",
      "internal": "false",
      "imageId": "ami-6e1a0117",
      "instanceType": "m3.xlarge",
      "sshIdentityFile": "%{CASTLE_SSH_IDENTITY_FILE}",
      "sshUser": "ubuntu"
    },
    "broker": {
      "type": ".BrokerRole",
      "initialDelayMs": 20000,
      "jvmOptions" : "-Xmx9g -Xms9g",
      "conf": {
        "num.io.threads": "16",
        "num.network.threads": "6",
        "zookeeper.session.timeout.ms": "12000",
        "confluent.schema.registry.url": "%{schema.registry.url}"
      }
    },
    "collectd": {
      "type": ".CollectdRole"
    },
    "jmx": {
      "type": ".JmxDumperRole",
      "conf": {
        "localhost:9192": {
          "periodMs": 1000,
          "files": [
            {
              "path": "/mnt/logs/jmx/kafka-metrics.csv",
              "objects": [
                {
                  "name": "kafka.server:type=FetchSessionCache,name=IncrementalFetchSessionEvictionsPerSec",
                  "shortName": "IncrementalFetchSessionEvictionsPerSec",
                  "attributes": ["Count"]
                },
                {
                  "name": "kafka.server:type=KafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent",
                  "shortName": "RequestHandlerAvgIdlePercent",
                  "attributes": ["Count"]
                },
                {
                  "name": "kafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent",
                  "shortName": "NetworkProcessorAvgIdlePercent",
                  "attributes": ["Value"]
                },
                {
                  "name": "kafka.server:type=ReplicaFetcherManager,name=MaxLag,clientId=Replica",
                  "shortName": "MaxLag",
                  "attributes": ["Value"]
                }
              ]
            }
          ]
        }
      }
    },
    "task": {
      "type": ".TaskRole",
      "initialDelayMs": 5000,
      "taskSpecs": {
        "bench": {
          "class": "org.apache.kafka.trogdor.workload.ProduceBenchSpec",
          "startMs": 0,
          "durationMs": 1000000000000000,
          "producerNode": "node0",
          "bootstrapServers": "%{bootstrapServers}",
          "targetMessagesPerSec": 2000000000,
          "maxMessages": 2000000,
          "producerConf": {
              "acks": "1",
              "compression.type": "snappy"
          },
          "keyGenerator" : {
            "type" : "constant",
            "size" : 12,
            "value" : "AAAAAAEMbXluYW1l"
          },
          "valueGenerator" : {
            "type" : "constant",
            "size" : 12,
            "value" : "AAAAAAEMbXluYW1l"
          },
          "activeTopics": {
            "active[1-%{CASTLE_ACTIVE_TOPICS}]": {
              "numPartitions": 3,
              "replicationFactor": 3
            }
          },
          "inactiveTopics": {
            "inactive[1-%{CASTLE_INACTIVE_TOPICS}]": {
              "numPartitions": 3,
              "replicationFactor": 3
            }
          }
        }
      }
    },
    "trogdorAgent": {
      "type": ".TrogdorAgentRole"
    },
    "trogdorCoordinator": {
      "type": ".TrogdorCoordinatorRole"
    },
    "ubuntuNode": {
      "type": ".UbuntuNodeRole"
    },
    "schemaRegistry": {
      "type": ".SchemaRegistryRole",
      "schemas": [
        {
          "subject": "active1-value",
          "schema": "{\"namespace\": \"example.avro\", \"type\": \"record\", \"name\": \"User\", \"fields\": [{\"name\": \"name\", \"type\": \"string\"}]}"
        }
      ]
    },
    "zooKeeper": {
      "type": ".ZooKeeperRole"
    }
  }
}
